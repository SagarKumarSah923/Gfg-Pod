#include <iostream>
#include <vector>

using namespace std;

class Solution {
  public:
    vector<int> spirallyTraverse(vector<vector<int> > &matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        int count = 0;
        vector<int> ans;

        int startingRow = 0;
        int startingCol = 0;
        int endingRow = row - 1;
        int endingCol = col - 1;

        while(count < row * col) {
            // First row, left to right
            for(int i = startingCol; count < row * col && i <= endingCol; i++) {
                ans.push_back(matrix[startingRow][i]);
                count++;
            }
            startingRow++;
            // Last column, top to bottom
            for(int i = startingRow; count < row * col && i <= endingRow; i++) {
                ans.push_back(matrix[i][endingCol]);
                count++;
            }
            endingCol--;
            // Last row, right to left
            for(int i = endingCol; count < row * col && i >= startingCol; i--) {
                ans.push_back(matrix[endingRow][i]);
                count++;
            }
            endingRow--;
            // First column, bottom to top
            for(int i = endingRow; count < row * col && i >= startingRow; i--) {
                ans.push_back(matrix[i][startingCol]);
                count++;
            }
            startingCol++;
        }
        return ans;
    }
};

int main() {
    // Define a sample matrix
    vector<vector<int>> matrix = {
        {1, 2, 3, 4},
        {5, 6, 7, 8},
        {9, 10, 11, 12},
        {13, 14, 15, 16}
    };

    Solution sol;
    vector<int> result = sol.spirallyTraverse(matrix);

    // Print the result
    for(int val : result) {
        cout << val << " ";
    }
    cout << endl;

    return 0;
}
